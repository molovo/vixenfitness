(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Header,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = Header = (function() {

  /**
   * Start your engines!
   *
   * @return {Header}
   */
  function Header() {
    this.toggleScrolledStatus = bind(this.toggleScrolledStatus, this);
    this.registerOnScrollListeners = bind(this.registerOnScrollListeners, this);

    /**
     * The body element
     *
     * @type {HTMLElement}
     */
    this.body = document.body;
    this.header = document.querySelector('.main-nav');
    this.logo = document.querySelector('.main-nav__logo');
    this.registerOnScrollListeners();
  }

  Header.prototype.registerOnScrollListeners = function() {
    return window.addEventListener('scroll', this.toggleScrolledStatus);
  };

  Header.prototype.toggleScrolledStatus = function() {
    var base, height, heightUnit, maxHeight, maxPadding, minHeight, minPadding, padding, paddingUnit, percentage;
    if (window.pageYOffset > 140) {
      this.header.style.backgroundColor = null;
      this.logo.style.height = null;
      this.body.classList.add('scrolled');
      return;
    }
    this.body.classList.remove('scrolled');
    base = parseInt(window.getComputedStyle(document.body).fontSize.replace('px', ''));
    percentage = window.pageYOffset / 140;
    heightUnit = 4.5 * base;
    minHeight = 1;
    maxHeight = 2;
    height = maxHeight - percentage;
    if (height < minHeight) {
      height = minHeight;
    }
    this.logo.style.height = (height * heightUnit) + "px";
    paddingUnit = 1.5 * base;
    minPadding = 0;
    maxPadding = 1;
    padding = maxPadding - percentage;
    if (padding < minPadding) {
      padding = minPadding;
    }
    this.header.style.paddingTop = (padding * paddingUnit) + "px";
    return this.header.style.paddingBottom = (padding * paddingUnit) + "px";
  };

  return Header;

})();


},{}],2:[function(require,module,exports){
var Header;

Header = require('./header.coffee');


/**
 * Where it all begins
 */

window.addEventListener('DOMContentLoaded', function() {
  return new Header;
});


},{"./header.coffee":1}]},{},[2])

//# sourceMappingURL=main.min.js.map
